{{- if .Values.billing.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "docuchat.fullname" . }}-billing-scripts
  labels:
    {{- include "docuchat.labels" . | nindent 4 }}
data:
  billing.py: |
    #!/usr/bin/env python3
    """
    Daily billing script for DocuChat
    
    Queries Prometheus for token usage metrics and generates invoices.
    """
    import os
    import sys
    from datetime import datetime, timedelta
    from typing import Dict, List
    
    import requests
    from prometheus_api_client import PrometheusConnect
    
    
    PROMETHEUS_URL = os.getenv("PROMETHEUS_URL", "http://localhost:9090")
    DATABASE_URL = os.getenv("DATABASE_URL", "")
    ZIBAL_API_KEY = os.getenv("ZIBAL_API_KEY", "")
    
    # Pricing: 20 Tomans per 1000 tokens
    PRICE_PER_1K_TOKENS = 20
    
    
    def query_prometheus_tokens(prom: PrometheusConnect) -> Dict[str, float]:
        """
        Query Prometheus for yesterday's token usage per tenant.
        
        Returns:
            Dict mapping tenant_id to total tokens
        """
        # Query for the last 24 hours
        end_time = datetime.now()
        start_time = end_time - timedelta(days=1)
        
        # Query: sum by tenant of openai_tokens_total increase over 24h
        query = 'sum by (tenant) (increase(openai_tokens_total[24h]))'
        
        try:
            result = prom.custom_query(query)
            
            token_usage = {}
            for metric in result:
                tenant = metric['metric'].get('tenant', 'unknown')
                tokens = float(metric['value'][1])
                token_usage[tenant] = tokens
            
            return token_usage
        except Exception as e:
            print(f"Error querying Prometheus: {e}", file=sys.stderr)
            return {}
    
    
    def calculate_cost(tokens: float) -> float:
        """Calculate cost in Tomans based on token count."""
        return (tokens / 1000.0) * PRICE_PER_1K_TOKENS
    
    
    def create_invoice_record(tenant_id: str, tokens: float, amount: float):
        """
        Create invoice record in database.
        
        Note: This is a placeholder. In production, use proper database client.
        """
        import psycopg2
        
        if not DATABASE_URL:
            print("Warning: DATABASE_URL not set, skipping database insert")
            return
        
        try:
            # Parse asyncpg URL to psycopg2 format
            db_url = DATABASE_URL.replace("postgresql+asyncpg://", "postgresql://")
            
            conn = psycopg2.connect(db_url)
            cur = conn.cursor()
            
            # Create table if not exists
            cur.execute("""
                CREATE TABLE IF NOT EXISTS tenant_invoice (
                    id SERIAL PRIMARY KEY,
                    tenant_id VARCHAR(255) NOT NULL,
                    tokens BIGINT NOT NULL,
                    amount DECIMAL(10, 2) NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    status VARCHAR(50) DEFAULT 'pending'
                )
            """)
            
            # Insert invoice
            cur.execute(
                "INSERT INTO tenant_invoice (tenant_id, tokens, amount) VALUES (%s, %s, %s)",
                (tenant_id, int(tokens), amount)
            )
            
            conn.commit()
            cur.close()
            conn.close()
            
            print(f"✅ Invoice created for tenant {tenant_id}: {tokens} tokens = {amount} Tomans")
        except Exception as e:
            print(f"Error creating invoice: {e}", file=sys.stderr)
    
    
    def create_zibal_payment(tenant_id: str, amount: float) -> str:
        """
        Create payment link via Zibal API.
        
        Returns:
            Payment URL
        """
        if not ZIBAL_API_KEY:
            print("Warning: ZIBAL_API_KEY not set, skipping payment creation")
            return ""
        
        try:
            # Zibal sandbox endpoint
            url = "https://gateway.zibal.ir/v1/request"
            
            payload = {
                "merchant": ZIBAL_API_KEY,
                "amount": int(amount * 10),  # Convert Tomans to Rials
                "callbackUrl": f"https://docuchat.example.com/billing/callback",
                "description": f"DocuChat usage for {tenant_id}",
                "orderId": f"{tenant_id}-{datetime.now().strftime('%Y%m%d')}"
            }
            
            response = requests.post(url, json=payload, timeout=10)
            data = response.json()
            
            if data.get("result") == 100:
                track_id = data.get("trackId")
                payment_url = f"https://gateway.zibal.ir/start/{track_id}"
                print(f"💳 Payment link created: {payment_url}")
                return payment_url
            else:
                print(f"Zibal error: {data.get('message')}", file=sys.stderr)
                return ""
        except Exception as e:
            print(f"Error creating Zibal payment: {e}", file=sys.stderr)
            return ""
    
    
    def send_invoice_email(tenant_id: str, tokens: float, amount: float, payment_url: str):
        """
        Send invoice email to tenant.
        
        Note: This is a placeholder. Implement with your email service.
        """
        print(f"📧 Email would be sent to {tenant_id}:")
        print(f"   Tokens used: {tokens:,.0f}")
        print(f"   Amount: {amount:,.2f} Tomans")
        print(f"   Payment link: {payment_url}")
    
    
    def main():
        """Main billing job execution."""
        print("=" * 60)
        print(f"🔄 Starting billing job at {datetime.now()}")
        print("=" * 60)
        
        # Connect to Prometheus
        prom = PrometheusConnect(url=PROMETHEUS_URL, disable_ssl=True)
        
        # Query token usage
        print("\n📊 Querying Prometheus for token usage...")
        token_usage = query_prometheus_tokens(prom)
        
        if not token_usage:
            print("ℹ️  No token usage found for the last 24 hours")
            return
        
        print(f"\n✅ Found usage for {len(token_usage)} tenant(s)\n")
        
        # Process each tenant
        total_revenue = 0.0
        for tenant_id, tokens in token_usage.items():
            print(f"Processing tenant: {tenant_id}")
            print(f"  Tokens: {tokens:,.0f}")
            
            amount = calculate_cost(tokens)
            print(f"  Amount: {amount:,.2f} Tomans")
            
            # Create database record
            create_invoice_record(tenant_id, tokens, amount)
            
            # Create payment link
            payment_url = create_zibal_payment(tenant_id, amount)
            
            # Send email
            send_invoice_email(tenant_id, tokens, amount, payment_url)
            
            total_revenue += amount
            print()
        
        print("=" * 60)
        print(f"✅ Billing job completed")
        print(f"💰 Total revenue: {total_revenue:,.2f} Tomans")
        print("=" * 60)
    
    
    if __name__ == "__main__":
        try:
            main()
        except Exception as e:
            print(f"❌ Billing job failed: {e}", file=sys.stderr)
            sys.exit(1)
{{- end }}
