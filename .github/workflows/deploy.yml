name: CD - Deploy to Kubernetes

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  K8S_NAMESPACE: docuchat-prod

jobs:
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}
    
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tags
        id: set-tags
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # For manual dispatch, use latest
            echo "backend_tag=latest" >> $GITHUB_OUTPUT
            echo "frontend_tag=latest" >> $GITHUB_OUTPUT
          else
            # For tag push, use the tag name
            TAG=${GITHUB_REF#refs/tags/}
            echo "backend_tag=$TAG" >> $GITHUB_OUTPUT
            echo "frontend_tag=$TAG" >> $GITHUB_OUTPUT
          fi

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.0'

      - name: Configure kubeconfig
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_B64" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Verify cluster access
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy with Helm
        env:
          BACKEND_TAG: ${{ steps.set-tags.outputs.backend_tag }}
          FRONTEND_TAG: ${{ steps.set-tags.outputs.frontend_tag }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ZIBAL_API_KEY: ${{ secrets.ZIBAL_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        run: |
          helm upgrade --install docuchat ./infra/chart \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --create-namespace \
            --set image.backend.repository=${{ env.REGISTRY }}/${{ github.repository }}/docuchat-backend \
            --set image.backend.tag=${{ env.BACKEND_TAG }} \
            --set image.frontend.repository=${{ env.REGISTRY }}/${{ github.repository }}/docuchat-frontend \
            --set image.frontend.tag=${{ env.FRONTEND_TAG }} \
            --set secrets.openaiApiKey=${{ env.OPENAI_API_KEY }} \
            --set secrets.zibalApiKey=${{ env.ZIBAL_API_KEY }} \
            --set secrets.databaseUrl=${{ env.DATABASE_URL }} \
            --set secrets.redisUrl=${{ env.REDIS_URL }} \
            --set secrets.jwtSecret=${{ env.JWT_SECRET }} \
            --set secrets.grafanaAdminPassword=${{ env.GRAFANA_ADMIN_PASSWORD }} \
            --wait \
            --timeout 10m

      - name: Verify backend deployment
        run: |
          kubectl rollout status deployment/docuchat-backend \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --timeout=5m

      - name: Verify frontend deployment
        run: |
          kubectl rollout status deployment/docuchat-frontend \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --timeout=5m

      - name: Check pod health
        run: |
          echo "=== Backend Pods ==="
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=docuchat-backend
          
          echo "=== Frontend Pods ==="
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=docuchat-frontend
          
          echo "=== All Services ==="
          kubectl get svc -n ${{ env.K8S_NAMESPACE }}

      - name: Run smoke tests
        run: |
          # Get backend service endpoint
          BACKEND_URL=$(kubectl get svc docuchat-backend -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          if [ -z "$BACKEND_URL" ]; then
            # Use port-forward if LoadBalancer is not available
            echo "Using port-forward for smoke tests"
            kubectl port-forward -n ${{ env.K8S_NAMESPACE }} svc/docuchat-backend 8000:8000 &
            PF_PID=$!
            sleep 5
            BACKEND_URL="localhost:8000"
          fi
          
          # Test health endpoint
          echo "Testing health endpoint..."
          curl -f http://${BACKEND_URL}/api/v1/health || exit 1
          
          # Test metrics endpoint
          echo "Testing metrics endpoint..."
          curl -f http://${BACKEND_URL}/api/v1/metrics || exit 1
          
          # Cleanup port-forward if used
          if [ ! -z "$PF_PID" ]; then
            kill $PF_PID
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace:** ${{ env.K8S_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Tag:** ${{ steps.set-tags.outputs.backend_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Tag:** ${{ steps.set-tags.outputs.frontend_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Deployment successful!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed!**" >> $GITHUB_STEP_SUMMARY
          fi
